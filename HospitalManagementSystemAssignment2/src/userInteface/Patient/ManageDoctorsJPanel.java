/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userInteface.Patient;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.InputVerifier;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.MyStringVerifier;
import model.Person;
import model.PersonDirectory;
import model.Doctor;

/**
 *
 * @author Dell
 */
public class ManageDoctorsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageDoctorsJPanel
     */
    private PersonDirectory personDirectory;
    private JPanel userProcessContainer1;
    public ManageDoctorsJPanel(JPanel userProcessContainer1, PersonDirectory personDirectory ) {
        initComponents();
        this.userProcessContainer1 = userProcessContainer1;
        this.personDirectory= personDirectory;
        ArrayList<Person> personList = personDirectory.getPersonHistory();
        populatePatientsTable(personList);
        InputVerifier stringVerifier = new MyStringVerifier();
        searchBoxJTextField.setInputVerifier(stringVerifier);
    }
private void populatePatientsTable(ArrayList<Person> personList) {
        DefaultTableModel model = (DefaultTableModel) viewPersonsJTable.getModel();
        model.setRowCount(0);
        if(personList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No Persons found. Please add Persons",
                    "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (Person person : personList) {
            Object[] row = new Object[4];
            row[0] = person;
            row[1]= person.getAge();
            row[3]= person.getPersoncity();
            if(person.getDoctor()!=null)
            {
                row[2] = person.getDoctor().getDoctorID();
            }
            else
            {
                row[2] = "  Doctor Not Created";
            }
            
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        searchPatientJButton = new javax.swing.JButton();
        searchBoxJTextField = new javax.swing.JTextField();
        deletePatientJButton = new javax.swing.JButton();
        viewPatientJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewPersonsJTable = new javax.swing.JTable();
        createPatientJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        refreshJButton.setBackground(new java.awt.Color(0, 102, 102));
        refreshJButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 310, 100, 30));

        backJButton.setBackground(new java.awt.Color(0, 102, 102));
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 100, 30));

        searchPatientJButton.setBackground(new java.awt.Color(0, 102, 102));
        searchPatientJButton.setForeground(new java.awt.Color(255, 255, 255));
        searchPatientJButton.setText("Search Doctor");
        searchPatientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPatientJButtonActionPerformed(evt);
            }
        });
        add(searchPatientJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 410, 120, 30));
        add(searchBoxJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 410, 180, 30));

        deletePatientJButton.setBackground(new java.awt.Color(0, 102, 102));
        deletePatientJButton.setForeground(new java.awt.Color(255, 255, 255));
        deletePatientJButton.setText("Delete Doctor");
        deletePatientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientJButtonActionPerformed(evt);
            }
        });
        add(deletePatientJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 310, 110, 30));

        viewPatientJButton.setBackground(new java.awt.Color(0, 102, 102));
        viewPatientJButton.setForeground(new java.awt.Color(255, 255, 255));
        viewPatientJButton.setText("View Doctor");
        viewPatientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientJButtonActionPerformed(evt);
            }
        });
        add(viewPatientJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 310, 120, 30));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Doctors");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 30, 490, -1));

        viewPersonsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Doctor Name", "Age", "Doctor ID", "City", "Hospital"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewPersonsJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 940, 170));

        createPatientJButton.setBackground(new java.awt.Color(0, 102, 102));
        createPatientJButton.setForeground(new java.awt.Color(255, 255, 255));
        createPatientJButton.setText("Create Doctor");
        createPatientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPatientJButtonActionPerformed(evt);
            }
        });
        add(createPatientJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 310, -1, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInteface/Patient/doctorss.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 640));
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        // TODO add your handling code here:
        searchBoxJTextField.setText("");
        populatePatientsTable(personDirectory.getPersonHistory());
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer1.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer1.getLayout();
        layout.previous(userProcessContainer1);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void searchPatientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPatientJButtonActionPerformed
        // TODO add your handling code here:
        String key= searchBoxJTextField.getText().trim();
        if(key.length()==0)
        {
            JOptionPane.showMessageDialog(this, "Please enter key.", "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        ArrayList<Person> searchDoctors;
        searchDoctors=personDirectory.searchDoctor(key);
        populatePatientsTable(searchDoctors);
    }//GEN-LAST:event_searchPatientJButtonActionPerformed

    private void deletePatientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow= viewPersonsJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person=(Person) viewPersonsJTable.getValueAt(selectedRow, 0);
        Doctor Doctor=person.getDoctor();
        if(Doctor==null)
        {
            JOptionPane.showMessageDialog(this, "Doctor not created. Cannot delete",
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        /*Ask confirmation*/
        int flag= JOptionPane.showConfirmDialog(this, "Are you sure want to remove?",
            "Warning", JOptionPane.YES_NO_OPTION);
        if(flag==0)
        {
            person.setDoctor(null);
            populatePatientsTable(personDirectory.getPersonHistory());
        }
    }//GEN-LAST:event_deletePatientJButtonActionPerformed

    private void viewPatientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow= viewPersonsJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Person person=(Person) viewPersonsJTable.getValueAt(selectedRow, 0);
        /*pass userProcessContainer and Doctor*/
        Doctor doctor= person.getDoctor();
        if(doctor!=null)
        {
            ViewUpdateDoctorDetailsJPanel vuddJPanel= new ViewUpdateDoctorDetailsJPanel(userProcessContainer1, doctor,Boolean.FALSE);
            userProcessContainer1.add("vuddJPanel", vuddJPanel);
            CardLayout layout=(CardLayout) userProcessContainer1.getLayout();
            layout.next(userProcessContainer1);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Doctor not created, "
                + "Please create Doctor first.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_viewPatientJButtonActionPerformed

    private void createPatientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPatientJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow= viewPersonsJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.",
                "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person=(Person) viewPersonsJTable.getValueAt(selectedRow, 0);
        if(person.getDoctor()!=null)
        {
            JOptionPane.showMessageDialog(this, "Doctor already exists.","Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        CreateDoctorJPanel cdJPanel= new CreateDoctorJPanel(person,userProcessContainer1);
        userProcessContainer1.add("cdJPanel", cdJPanel);
        CardLayout layout=(CardLayout) userProcessContainer1.getLayout();
        layout.next(userProcessContainer1);
    }//GEN-LAST:event_createPatientJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton createPatientJButton;
    private javax.swing.JButton deletePatientJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTextField searchBoxJTextField;
    private javax.swing.JButton searchPatientJButton;
    private javax.swing.JButton viewPatientJButton;
    private javax.swing.JTable viewPersonsJTable;
    // End of variables declaration//GEN-END:variables
}
